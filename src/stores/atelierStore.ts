import { defineStore } from 'pinia'
import { ref, computed } from 'vue'
import { supabase } from '@/lib/supabase'
import { useAuthStore } from './authStore'

export interface Order {
  id: string
  clientName: string
  itemName: string
  price: number
  progress: number
  status: 'in_progress' | 'completed' | 'pending'
  dueDate: number // –∏–≥—Ä–æ–≤—ã–µ –¥–Ω–∏
  createdAt: number
  complexity: number // 1-5, –≤–ª–∏—è–µ—Ç –Ω–∞ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
  materials: string[] // ID –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤
}

export interface Equipment {
  id: string
  name: string
  type: 'sewing_machine' | 'overlock' | 'mannequin' | 'ironing_board' | 'cutting_table' | 'fabric_cutter'
  level: number
  efficiency: number // 0-100, –≤–ª–∏—è–µ—Ç –Ω–∞ —Å–∫–æ—Ä–æ—Å—Ç—å —Ä–∞–±–æ—Ç—ã
  condition: number // 0-100, –≤–ª–∏—è–µ—Ç –Ω–∞ –∫–∞—á–µ—Å—Ç–≤–æ
  price: number
  isWorking: boolean
  icon: string
}

export interface Staff {
  id: string
  name: string
  position: 'seamstress' | 'cutter' | 'manager' | 'buyer'
  skill: number // 0-100
  salary: number // –≤ –º–µ—Å—è—Ü
  efficiency: number // 0-100, –≤–ª–∏—è–µ—Ç –Ω–∞ —Å–∫–æ—Ä–æ—Å—Ç—å —Ä–∞–±–æ—Ç—ã
  isWorking: boolean
  hiredAt: number
}

export interface AtelierState {
  isRented: boolean
  monthlyRent: number
  orders: Order[]
  equipment: Equipment[]
  staff: Staff[]
  reputation: number // 0-100
  dailyIncome: number
  monthlyIncome: number
  activeOrders: number
  completedOrders: number
}

export const useAtelierStore = defineStore('atelier', () => {
  const authStore = useAuthStore()
  
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –∞—Ç–µ–ª—å–µ
  const atelierState = ref<AtelierState>({
    isRented: false,
    monthlyRent: 15000,
    orders: [],
    equipment: [],
    staff: [],
    reputation: 0,
    dailyIncome: 0,
    monthlyIncome: 0,
    activeOrders: 0,
    completedOrders: 0
  })

  // –ë–∞–∑–æ–≤–æ–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ –ø—Ä–∏ –∞—Ä–µ–Ω–¥–µ
  const initialEquipment: Equipment[] = [
    {
      id: 'basic_sewing_machine',
      name: '–ë–∞–∑–æ–≤–∞—è —à–≤–µ–π–Ω–∞—è –º–∞—à–∏–Ω–∞',
      type: 'sewing_machine',
      level: 1,
      efficiency: 50,
      condition: 80,
      price: 0,
      isWorking: true,
      icon: 'üßµ'
    }
  ]

  // –î–æ—Å—Ç—É–ø–Ω—ã–µ –∑–∞–∫–∞–∑—ã (–≥–µ–Ω–µ—Ä–∏—Ä—É—é—Ç—Å—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏)
  const availableOrders = ref<Order[]>([])

  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–æ–≤—ã—Ö –∑–∞–∫–∞–∑–æ–≤
  const generateNewOrders = () => {
    const orderTemplates = [
      {
        clientName: '–ê–Ω–Ω–∞ –ü–µ—Ç—Ä–æ–≤–∞',
        itemName: '–í–µ—á–µ—Ä–Ω–µ–µ –ø–ª–∞—Ç—å–µ',
        price: 15000,
        dueDate: 3,
        complexity: 3,
        materials: ['fabric_silk', 'thread_gold', 'zipper']
      },
      {
        clientName: '–ú–∏—Ö–∞–∏–ª –°–æ–∫–æ–ª–æ–≤',
        itemName: '–î–µ–ª–æ–≤–æ–π –∫–æ—Å—Ç—é–º',
        price: 25000,
        dueDate: 7,
        complexity: 4,
        materials: ['fabric_wool', 'thread_black', 'buttons_pearl']
      },
      {
        clientName: '–ï–ª–µ–Ω–∞ –ö–æ–∑–ª–æ–≤–∞',
        itemName: '–õ–µ—Ç–Ω–µ–µ –ø–ª–∞—Ç—å–µ',
        price: 8000,
        dueDate: 2,
        complexity: 2,
        materials: ['fabric_cotton', 'thread_white']
      },
      {
        clientName: '–î–º–∏—Ç—Ä–∏–π –í–æ–ª–∫–æ–≤',
        itemName: '–†—É–±–∞—à–∫–∞',
        price: 6000,
        dueDate: 1,
        complexity: 1,
        materials: ['fabric_cotton', 'thread_blue']
      },
      {
        clientName: '–°–≤–µ—Ç–ª–∞–Ω–∞ –ú–æ—Ä–æ–∑–æ–≤–∞',
        itemName: '–ü–∞–ª—å—Ç–æ',
        price: 35000,
        dueDate: 10,
        complexity: 5,
        materials: ['fabric_wool', 'thread_black', 'buttons_wood', 'lining']
      },
      {
        clientName: '–ê–ª–µ–∫—Å–∞–Ω–¥—Ä –ù–æ–≤–∏–∫–æ–≤',
        itemName: '–ë—Ä—é–∫–∏',
        price: 12000,
        dueDate: 4,
        complexity: 3,
        materials: ['fabric_denim', 'thread_blue', 'zipper']
      }
    ]

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º 2-4 —Å–ª—É—á–∞–π–Ω—ã—Ö –∑–∞–∫–∞–∑–∞
    const numOrders = Math.floor(Math.random() * 3) + 2 // 2-4 –∑–∞–∫–∞–∑–∞
    const newOrders: Order[] = []
    
    for (let i = 0; i < numOrders; i++) {
      const template = orderTemplates[Math.floor(Math.random() * orderTemplates.length)]
      const order: Order = {
        id: `order_${Date.now()}_${i}`,
        ...template,
        progress: 0,
        status: 'pending',
        createdAt: Date.now()
      }
      newOrders.push(order)
    }
    
    availableOrders.value = newOrders
    console.log('üìã –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã –Ω–æ–≤—ã–µ –∑–∞–∫–∞–∑—ã:', newOrders.length)
  }

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–∫–∞–∑–æ–≤
  generateNewOrders()

  // –î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∏ –¥–ª—è –Ω–∞–π–º–∞
  const availableStaff = ref<Staff[]>([
    {
      id: 'staff_1',
      name: '–ú–∞—Ä–∏—è –ò–≤–∞–Ω–æ–≤–∞',
      position: 'seamstress',
      skill: 85,
      salary: 30000,
      efficiency: 80,
      isWorking: false,
      hiredAt: 0
    },
    {
      id: 'staff_2',
      name: '–û–ª—å–≥–∞ –°–º–∏—Ä–Ω–æ–≤–∞',
      position: 'cutter',
      skill: 72,
      salary: 25000,
      efficiency: 75,
      isWorking: false,
      hiredAt: 0
    },
    {
      id: 'staff_3',
      name: '–¢–∞—Ç—å—è–Ω–∞ –ö–æ–∑–ª–æ–≤–∞',
      position: 'manager',
      skill: 90,
      salary: 35000,
      efficiency: 85,
      isWorking: false,
      hiredAt: 0
    }
  ])

  // –î–æ—Å—Ç—É–ø–Ω–æ–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ –¥–ª—è –ø–æ–∫—É–ø–∫–∏
  const shopEquipment = ref<Equipment[]>([
    {
      id: 'sewing_machine_pro',
      name: '–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–∞—è —à–≤–µ–π–Ω–∞—è –º–∞—à–∏–Ω–∞',
      type: 'sewing_machine',
      level: 3,
      efficiency: 90,
      condition: 100,
      price: 50000,
      isWorking: true,
      icon: 'üßµ'
    },
    {
      id: 'overlock_juki',
      name: '–û–≤–µ—Ä–ª–æ–∫ Juki',
      type: 'overlock',
      level: 2,
      efficiency: 80,
      condition: 100,
      price: 35000,
      isWorking: true,
      icon: '‚ö°'
    },
    {
      id: 'mannequin_pro',
      name: '–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –º–∞–Ω–µ–∫–µ–Ω',
      type: 'mannequin',
      level: 2,
      efficiency: 70,
      condition: 100,
      price: 20000,
      isWorking: true,
      icon: 'üëó'
    },
    {
      id: 'ironing_board_pro',
      name: '–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–∞—è –≥–ª–∞–¥–∏–ª—å–Ω–∞—è –¥–æ—Å–∫–∞',
      type: 'ironing_board',
      level: 2,
      efficiency: 60,
      condition: 100,
      price: 15000,
      isWorking: true,
      icon: 'üî•'
    },
    {
      id: 'cutting_table_pro',
      name: '–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π —Ä–∞—Å–∫—Ä–æ–π–Ω—ã–π —Å—Ç–æ–ª',
      type: 'cutting_table',
      level: 2,
      efficiency: 75,
      condition: 100,
      price: 25000,
      isWorking: true,
      icon: 'üìè'
    }
  ])

  // Computed —Å–≤–æ–π—Å—Ç–≤–∞
  const totalEfficiency = computed(() => {
    const staffEfficiency = atelierState.value.staff
      .filter(s => s.isWorking)
      .reduce((sum, s) => sum + s.efficiency, 0)
    
    const equipmentEfficiency = atelierState.value.equipment
      .filter(e => e.isWorking)
      .reduce((sum, e) => sum + e.efficiency, 0)
    
    return Math.min(100, staffEfficiency + equipmentEfficiency)
  })

  const dailyExpenses = computed(() => {
    return atelierState.value.staff
      .filter(s => s.isWorking)
      .reduce((sum, s) => sum + s.salary / 30, 0) // –¥–Ω–µ–≤–Ω–∞—è –∑–∞—Ä–ø–ª–∞—Ç–∞
  })

  const canTakeOrder = computed(() => {
    // –ú–æ–∂–Ω–æ –±—Ä–∞—Ç—å –∑–∞–∫–∞–∑—ã –µ—Å–ª–∏ –µ—Å—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ —Ä–∞–±–æ—Ç–∞—é—â–µ–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ
    // –°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏ –Ω–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã –¥–ª—è –Ω–∞—á–∞–ª–∞
    return atelierState.value.isRented && atelierState.value.equipment.some(e => e.isWorking)
  })

  // –ú–µ—Ç–æ–¥—ã
  const rentAtelier = async () => {
    if (!authStore.user) {
      console.log('‚ùå –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –∞—Ä–µ–Ω–¥—ã –∞—Ç–µ–ª—å–µ')
      return false
    }
    
    // –ù–µ —Å–ø–∏—Å—ã–≤–∞–µ–º –¥–µ–Ω—å–≥–∏ - —ç—Ç–æ —É–∂–µ —Å–¥–µ–ª–∞–ª company.rent()
    console.log('üè≠ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞—Ç–µ–ª—å–µ (–¥–µ–Ω—å–≥–∏ —É–∂–µ —Å–ø–∏—Å–∞–Ω—ã —á–µ—Ä–µ–∑ company.rent)')
    
    atelierState.value.isRented = true
    atelierState.value.equipment = [...initialEquipment]
    console.log('‚úÖ –ê—Ç–µ–ª—å–µ –∞—Ä–µ–Ω–¥–æ–≤–∞–Ω–æ, –¥–æ–±–∞–≤–ª–µ–Ω–æ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ:', atelierState.value.equipment.length)
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ Supabase
    await saveAtelierState()
    console.log('üíæ –°–æ—Å—Ç–æ—è–Ω–∏–µ –∞—Ç–µ–ª—å–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ')
    return true
  }

  const takeOrder = async (orderId: string) => {
    const order = availableOrders.value.find(o => o.id === orderId)
    if (!order || !canTakeOrder.value) return false
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∞—Ç–µ—Ä–∏–∞–ª—ã
    const hasMaterials = await checkMaterials(order.materials)
    if (!hasMaterials) return false
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–∫–∞–∑
    const newOrder = { ...order, status: 'in_progress' as const, createdAt: Date.now() }
    atelierState.value.orders.push(newOrder)
    atelierState.value.activeOrders++
    
    // –£–¥–∞–ª—è–µ–º –∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö
    availableOrders.value = availableOrders.value.filter(o => o.id !== orderId)
    
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑ –≤–∑–∞–º–µ–Ω –≤–∑—è—Ç–æ–≥–æ
    if (availableOrders.value.length < 2) {
      generateNewOrders()
    }
    
    await saveAtelierState()
    return true
  }

  const checkMaterials = async (_materials: string[]) => {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –Ω–∞ —Å–∫–ª–∞–¥–µ
    // –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º true, –ø–æ–∑–∂–µ –∏–Ω—Ç–µ–≥—Ä–∏—Ä—É–µ–º —Å warehouseStore
    return true
  }

  const workOnOrder = async (orderId: string, progress: number) => {
    const order = atelierState.value.orders.find(o => o.id === orderId)
    if (!order) return false
    
    order.progress = Math.min(100, order.progress + progress)
    
    if (order.progress >= 100) {
      order.status = 'completed'
      atelierState.value.activeOrders--
      atelierState.value.completedOrders++
      
      // –ù–∞—á–∏—Å–ª—è–µ–º –¥–µ–Ω—å–≥–∏
      await authStore.addMoney(order.price)
      
      // –£–¥–∞–ª—è–µ–º –∑–∞–∫–∞–∑
      atelierState.value.orders = atelierState.value.orders.filter(o => o.id !== orderId)
    }
    
    await saveAtelierState()
    return true
  }

  const hireStaff = async (staffId: string) => {
    const staff = availableStaff.value.find(s => s.id === staffId)
    if (!staff || !authStore.user) return false
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å (–ø–µ—Ä–≤—ã–π –º–µ—Å—è—Ü –∑–∞—Ä–ø–ª–∞—Ç—ã)
    if (authStore.user.money < staff.salary) return false
    
    // –°–ø–∏—Å—ã–≤–∞–µ–º –∑–∞—Ä–ø–ª–∞—Ç—É
    const success = await authStore.spendMoney(staff.salary)
    if (!success) return false
    
    // –ù–∞–Ω–∏–º–∞–µ–º
    const hiredStaff = { ...staff, isWorking: true, hiredAt: Date.now() }
    atelierState.value.staff.push(hiredStaff)
    
    // –£–±–∏—Ä–∞–µ–º –∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–ª—è –Ω–∞–π–º–∞
    const staffIndex = availableStaff.value.findIndex(s => s.id === staffId)
    if (staffIndex !== -1) {
      availableStaff.value.splice(staffIndex, 1)
    }
    
    console.log('‚úÖ –ù–∞–Ω—è—Ç —Å–æ—Ç—Ä—É–¥–Ω–∏–∫:', staff.name)
    await saveAtelierState()
    return true
  }

  const buyEquipment = async (equipmentId: string) => {
    const equipment = shopEquipment.value.find(e => e.id === equipmentId)
    if (!equipment || !authStore.user) return false
    
    if (authStore.user.money < equipment.price) return false
    
    const success = await authStore.spendMoney(equipment.price)
    if (!success) return false
    
    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ –≤ –∞—Ç–µ–ª—å–µ
    atelierState.value.equipment.push({ ...equipment })
    
    // –£–±–∏—Ä–∞–µ–º –∏–∑ –º–∞–≥–∞–∑–∏–Ω–∞
    const shopIndex = shopEquipment.value.findIndex(e => e.id === equipmentId)
    if (shopIndex !== -1) {
      shopEquipment.value.splice(shopIndex, 1)
    }
    
    console.log('‚úÖ –ö—É–ø–ª–µ–Ω–æ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ:', equipment.name)
    await saveAtelierState()
    return true
  }

  const repairEquipment = async (equipmentId: string) => {
    const equipment = atelierState.value.equipment.find(e => e.id === equipmentId)
    if (!equipment) return false
    
    const repairCost = Math.floor(equipment.price * 0.1) // 10% –æ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏
    if (!authStore.user || authStore.user.money < repairCost) return false
    
    const success = await authStore.spendMoney(repairCost)
    if (!success) return false
    
    equipment.condition = 100
    equipment.isWorking = true
    
    console.log('üîß –û—Ç—Ä–µ–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–æ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ:', equipment.name)
    await saveAtelierState()
    return true
  }

  const fireStaff = async (staffId: string) => {
    const staffIndex = atelierState.value.staff.findIndex(s => s.id === staffId)
    if (staffIndex === -1) return false
    
    const staff = atelierState.value.staff[staffIndex]
    
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –¥–ª—è –Ω–∞–π–º–∞
    availableStaff.value.push({
      ...staff,
      isWorking: false,
      hiredAt: 0
    })
    
    // –£–±–∏—Ä–∞–µ–º –∏–∑ –Ω–∞–Ω—è—Ç—ã—Ö
    atelierState.value.staff.splice(staffIndex, 1)
    
    console.log('üëã –£–≤–æ–ª–µ–Ω —Å–æ—Ç—Ä—É–¥–Ω–∏–∫:', staff.name)
    await saveAtelierState()
    return true
  }

  const saveAtelierState = async () => {
    if (!authStore.user) return
    
    try {
      const { error } = await supabase
        .from('user_atelier')
        .upsert({
          user_id: authStore.user.id,
          atelier_data: atelierState.value
        })
      
      if (error) throw error
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –∞—Ç–µ–ª—å–µ:', error)
    }
  }

  const loadAtelierState = async () => {
    if (!authStore.user) return
    
    try {
      const { data, error } = await supabase
        .from('user_atelier')
        .select('atelier_data')
        .eq('user_id', authStore.user.id)
        .single()
      
      if (error && error.code !== 'PGRST116') throw error
      
      if (data && data.atelier_data) {
        // –ü–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–º–µ–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ –±–∞–∑—ã
        atelierState.value = data.atelier_data
        
        // –ï—Å–ª–∏ –∞—Ç–µ–ª—å–µ –∞—Ä–µ–Ω–¥–æ–≤–∞–Ω–æ, –Ω–æ –Ω–µ—Ç –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è - –¥–æ–±–∞–≤–ª—è–µ–º –±–∞–∑–æ–≤–æ–µ
        if (atelierState.value.isRented && (!atelierState.value.equipment || atelierState.value.equipment.length === 0)) {
          atelierState.value.equipment = [...initialEquipment]
          console.log('üîß –î–æ–±–∞–≤–ª–µ–Ω–æ –±–∞–∑–æ–≤–æ–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ')
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –º–∞—Å—Å–∏–≤—ã —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –∏ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è
        if (data.atelier_data.equipment) {
          // –ü–æ–º–µ—á–∞–µ–º –∫—É–ø–ª–µ–Ω–Ω–æ–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ –∫–∞–∫ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ–µ –¥–ª—è –ø–æ–∫—É–ø–∫–∏
          data.atelier_data.equipment.forEach((ownedEquipment: Equipment) => {
            const shopIndex = shopEquipment.value.findIndex(e => e.id === ownedEquipment.id)
            if (shopIndex !== -1) {
              shopEquipment.value.splice(shopIndex, 1)
            }
          })
        }
        
        if (data.atelier_data.staff) {
          // –ü–æ–º–µ—á–∞–µ–º –Ω–∞–Ω—è—Ç—ã—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –∫–∞–∫ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–ª—è –Ω–∞–π–º–∞
          data.atelier_data.staff.forEach((hiredStaff: Staff) => {
            const staffIndex = availableStaff.value.findIndex(s => s.id === hiredStaff.id)
            if (staffIndex !== -1) {
              availableStaff.value.splice(staffIndex, 1)
            }
          })
        }
        
        console.log('‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∞—Ç–µ–ª—å–µ:', atelierState.value)
        console.log('üîß –†–∞–±–æ—Ç–∞—é—â–µ–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ:', atelierState.value.equipment.filter(e => e.isWorking).length)
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∞—Ç–µ–ª—å–µ:', error)
    }
  }

  return {
    // State
    atelierState,
    availableOrders,
    availableStaff,
    shopEquipment,
    
    // Computed
    totalEfficiency,
    dailyExpenses,
    canTakeOrder,
    
    // Methods
    generateNewOrders,
    rentAtelier,
    takeOrder,
    workOnOrder,
    hireStaff,
    fireStaff,
    buyEquipment,
    repairEquipment,
    saveAtelierState,
    loadAtelierState
  }
})
