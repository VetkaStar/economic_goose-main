import { defineStore } from 'pinia'
import { ref, computed } from 'vue'
import { supabase } from '@/lib/supabase'
import type { Auction, AuctionParticipant, AuctionBid, AuctionStatus } from '@/types/auction'
import { useAuthStore } from './authStore'
import type { RealtimeChannel } from '@supabase/supabase-js'

export const useAuctionStore = defineStore('auction', () => {
  const authStore = useAuthStore()
  
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ
  const currentAuction = ref<Auction | null>(null)
  const availableAuctions = ref<Auction[]>([])  // –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞—É–∫—Ü–∏–æ–Ω–æ–≤
  const isConnected = ref(false)
  const isLoading = ref(false)
  const error = ref<string | null>(null)
  
  let auctionChannel: RealtimeChannel | null = null
  let auctionsListChannel: RealtimeChannel | null = null // –ö–∞–Ω–∞–ª –¥–ª—è —Å–ø–∏—Å–∫–∞ –∞—É–∫—Ü–∏–æ–Ω–æ–≤
  let timerInterval: number | null = null
  let listTimerInterval: number | null = null // –¢–∞–π–º–µ—Ä –¥–ª—è —Å–ø–∏—Å–∫–∞ –∞—É–∫—Ü–∏–æ–Ω–æ–≤

  // Computed
  const isParticipating = computed(() => {
    if (!currentAuction.value || !authStore.user) return false
    return currentAuction.value.participants.some(p => p.id === authStore.user?.id)
  })

  const isCurrentBidder = computed(() => {
    if (!currentAuction.value || !authStore.user) return false
    return currentAuction.value.current_bidder_id === authStore.user.id
  })

  const canPlaceBid = computed(() => {
    if (!currentAuction.value || !authStore.user) return false
    if (currentAuction.value.status !== 'active') return false
    return true
  })

  const minimumNextBid = computed(() => {
    if (!currentAuction.value) return 0
    // –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å–ª–µ–¥—É—é—â–∞—è —Å—Ç–∞–≤–∫–∞ = —Ç–µ–∫—É—â–∞—è + 10% –∏–ª–∏ –º–∏–Ω–∏–º—É–º +100
    const increment = Math.max(Math.ceil(currentAuction.value.current_bid * 0.1), 100)
    return currentAuction.value.current_bid + increment
  })

  // –ó–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞—É–∫—Ü–∏–æ–Ω–æ–≤
  async function loadAvailableAuctions() {
    isLoading.value = true
    error.value = null

    try {
      const { data: auctions, error: fetchError } = await supabase
        .from('auctions')
        .select('*')
        .in('status', ['waiting', 'active', 'finished'])
        .order('created_at', { ascending: false })
        .limit(20)

      if (fetchError) throw fetchError

      availableAuctions.value = (auctions || []).map(a => ({
        id: a.id,
        material: a.material_data,
        starting_price: a.starting_price,
        current_bid: a.current_bid,
        current_bidder_id: a.current_bidder_id,
        current_bidder_name: a.current_bidder_name,
        time_left: a.time_left,
        status: a.status,
        participants: [],
        bids_history: [],
        winner_id: a.winner_id,
        winner_name: a.winner_name,
        created_at: a.created_at,
        started_at: a.started_at,
        finished_at: a.finished_at
      }))

      console.log(`üìã –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${availableAuctions.value.length} –∞—É–∫—Ü–∏–æ–Ω–æ–≤`)
      
      // –ï—Å–ª–∏ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö/–æ–∂–∏–¥–∞—é—â–∏—Ö –∞—É–∫—Ü–∏–æ–Ω–æ–≤, —Å–æ–∑–¥–∞—ë–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –Ω–æ–≤—ã—Ö
      const activeAuctions = availableAuctions.value.filter(a => 
        a.status === 'waiting' || a.status === 'active'
      )
      
      if (activeAuctions.length < 3) {
        const toCreate = 3 - activeAuctions.length
        console.log(`üÜï –°–æ–∑–¥–∞—ë–º ${toCreate} –Ω–æ–≤—ã—Ö –∞—É–∫—Ü–∏–æ–Ω–æ–≤`)
        
        // –°–æ–∑–¥–∞—ë–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –∞—É–∫—Ü–∏–æ–Ω–æ–≤ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
        await Promise.all(
          Array.from({ length: toCreate }, () => createAuction())
        )
        
        await loadAvailableAuctions()  // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫
      }
      
      // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∞—É–∫—Ü–∏–æ–Ω–æ–≤
      subscribeToAuctionsList()

      return true
    } catch (err: any) {
      error.value = err.message
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∞—É–∫—Ü–∏–æ–Ω–æ–≤:', err)
      return false
    } finally {
      isLoading.value = false
    }
  }

  // –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∞—É–∫—Ü–∏–æ–Ω–æ–≤ (Realtime)
  async function subscribeToAuctionsList() {
    // –û—Ç–ø–∏—Å—ã–≤–∞–µ–º—Å—è –æ—Ç –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –∫–∞–Ω–∞–ª–∞
    if (auctionsListChannel) {
      await supabase.removeChannel(auctionsListChannel)
    }

    // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Ç–∞–π–º–µ—Ä
    if (listTimerInterval) {
      clearInterval(listTimerInterval)
      listTimerInterval = null
    }

    auctionsListChannel = supabase.channel('auctions_list')

    // –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Ç–∞–±–ª–∏—Ü–µ auctions
    auctionsListChannel
      .on(
        'postgres_changes',
        {
          event: '*', // –í—Å–µ —Å–æ–±—ã—Ç–∏—è (INSERT, UPDATE, DELETE)
          schema: 'public',
          table: 'auctions'
        },
        async (payload) => {
          console.log('üîÑ Realtime –∏–∑–º–µ–Ω–µ–Ω–∏–µ –≤ —Å–ø–∏—Å–∫–µ –∞—É–∫—Ü–∏–æ–Ω–æ–≤:', payload.eventType)
          
          // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ –∞—É–∫—Ü–∏–æ–Ω–æ–≤
          const { data: auctionsData } = await supabase
            .from('auctions')
            .select('*')
            .in('status', ['waiting', 'active', 'finished'])
            .order('created_at', { ascending: false })
            .limit(20)

          if (auctionsData) {
            availableAuctions.value = auctionsData.map(a => ({
              id: a.id,
              material: a.material_data,
              starting_price: a.starting_price,
              current_bid: a.current_bid,
              current_bidder_id: a.current_bidder_id,
              current_bidder_name: a.current_bidder_name,
              time_left: a.time_left,
              status: a.status,
              participants: [],
              bids_history: [],
              winner_id: a.winner_id,
              winner_name: a.winner_name,
              created_at: a.created_at,
              started_at: a.started_at,
              finished_at: a.finished_at
            }))
          }
        }
      )
      .subscribe((status) => {
        console.log('üì° –°—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ —Å–ø–∏—Å–æ–∫ –∞—É–∫—Ü–∏–æ–Ω–æ–≤:', status)
      })

    // –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –ª–æ–∫–∞–ª—å–Ω–æ (–∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É)
    listTimerInterval = window.setInterval(() => {
      availableAuctions.value.forEach(auction => {
        if (auction.status === 'active' && auction.started_at) {
          const startedAt = new Date(auction.started_at).getTime()
          const now = Date.now()
          const elapsed = Math.floor((now - startedAt) / 1000)
          auction.time_left = Math.max(0, 60 - elapsed)
        }
      })
    }, 1000)
  }

  // –û—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç —Å–ø–∏—Å–∫–∞ –∞—É–∫—Ü–∏–æ–Ω–æ–≤
  async function unsubscribeFromAuctionsList() {
    if (auctionsListChannel) {
      await supabase.removeChannel(auctionsListChannel)
      auctionsListChannel = null
    }

    if (listTimerInterval) {
      clearInterval(listTimerInterval)
      listTimerInterval = null
    }
  }

  // –ù–∞–π—Ç–∏ –¥–æ—Å—Ç—É–ø–Ω—ã–π –∞—É–∫—Ü–∏–æ–Ω –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π (DEPRECATED - –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å loadAvailableAuctions)
  async function findOrCreateAuction() {
    await loadAvailableAuctions()
    
    // –ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–µ–º—Å—è –∫ –ø–µ—Ä–≤–æ–º—É –¥–æ—Å—Ç—É–ø–Ω–æ–º—É
    const availableAuction = availableAuctions.value.find(a => 
      a.status === 'waiting' || a.status === 'active'
    )
    
    if (availableAuction) {
      await joinAuction(availableAuction.id)
      return availableAuction.id
    }
    
    return null
  }

  // –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –∞—É–∫—Ü–∏–æ–Ω (–≤—Ä–µ–º–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
  async function createAuction() {
    // –≠–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –¥–ª—è –∞—É–∫—Ü–∏–æ–Ω–æ–≤
    const exclusiveMaterials = [
      {
        id: 'silk_imperial',
        name: '–ò–º–ø–µ—Ä–∞—Ç–æ—Ä—Å–∫–∏–π —à—ë–ª–∫',
        icon: 'üëë',
        description: '–†–µ–¥—á–∞–π—à–∏–π —à—ë–ª–∫ –∏–∑ –∫–æ—Ä–æ–ª–µ–≤—Å–∫–∏—Ö —Ç—É—Ç–æ–≤—ã—Ö —Å–∞–¥–æ–≤',
        base_price: 2500,
        quality: 99,
        quantity: 20,
        durability: 7,
        comfort: 10,
        style: 10
      },
      {
        id: 'cashmere_himalayan',
        name: '–ì–∏–º–∞–ª–∞–π—Å–∫–∏–π –∫–∞—à–µ–º–∏—Ä',
        icon: 'üèîÔ∏è',
        description: '–ù–µ–≤–µ—Ä–æ—è—Ç–Ω–æ –º—è–≥–∫–∏–π –∫–∞—à–µ–º–∏—Ä –∏–∑ –ì–∏–º–∞–ª–∞–µ–≤',
        base_price: 3000,
        quality: 98,
        quantity: 15,
        durability: 8,
        comfort: 10,
        style: 9
      },
      {
        id: 'leather_exotic',
        name: '–≠–∫–∑–æ—Ç–∏—á–µ—Å–∫–∞—è –∫–æ–∂–∞',
        icon: 'üêä',
        description: '–ü—Ä–µ–º–∏–∞–ª—å–Ω–∞—è –∫–æ–∂–∞ —Ä–µ–¥–∫–∏—Ö –∂–∏–≤–æ—Ç–Ω—ã—Ö',
        base_price: 4000,
        quality: 97,
        quantity: 10,
        durability: 10,
        comfort: 7,
        style: 10
      },
      {
        id: 'wool_merino_gold',
        name: '–ó–æ–ª–æ—Ç–∞—è —à–µ—Ä—Å—Ç—å –º–µ—Ä–∏–Ω–æ—Å–∞',
        icon: 'üêë',
        description: '–õ—É—á—à–∞—è —à–µ—Ä—Å—Ç—å –º–µ—Ä–∏–Ω–æ—Å–∞ –∫–ª–∞—Å—Å–∞ –ª—é–∫—Å',
        base_price: 1800,
        quality: 95,
        quantity: 30,
        durability: 9,
        comfort: 9,
        style: 8
      },
      {
        id: 'velvet_royal',
        name: '–ö–æ—Ä–æ–ª–µ–≤—Å–∫–∏–π –±–∞—Ä—Ö–∞—Ç',
        icon: 'üíé',
        description: '–†–æ—Å–∫–æ—à–Ω—ã–π –±–∞—Ä—Ö–∞—Ç –¥–ª—è –∫–æ—Ä–æ–ª–µ–≤—Å–∫–∏—Ö –Ω–∞—Ä—è–¥–æ–≤',
        base_price: 2200,
        quality: 96,
        quantity: 25,
        durability: 7,
        comfort: 10,
        style: 10
      },
      {
        id: 'linen_belgian',
        name: '–ë–µ–ª—å–≥–∏–π—Å–∫–∏–π –ª—ë–Ω –ø—Ä–µ–º–∏—É–º',
        icon: 'üåæ',
        description: '–í—ã—Å–æ–∫–æ–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –ª—ë–Ω –∏–∑ –ë–µ–ª—å–≥–∏–∏',
        base_price: 1500,
        quality: 93,
        quantity: 35,
        durability: 9,
        comfort: 9,
        style: 7
      },
      {
        id: 'satin_moonlight',
        name: '–õ—É–Ω–Ω—ã–π –∞—Ç–ª–∞—Å',
        icon: 'üåô',
        description: '–ü–µ—Ä–µ–ª–∏–≤–∞—é—â–∏–π—Å—è –∞—Ç–ª–∞—Å —Å —ç—Ñ—Ñ–µ–∫—Ç–æ–º –ª—É–Ω–Ω–æ–≥–æ —Å–≤–µ—Ç–∞',
        base_price: 2000,
        quality: 94,
        quantity: 28,
        durability: 6,
        comfort: 9,
        style: 10
      },
      {
        id: 'tweed_scottish',
        name: '–®–æ—Ç–ª–∞–Ω–¥—Å–∫–∏–π —Ç–≤–∏–¥',
        icon: 'üè¥Û†ÅßÛ†Å¢Û†Å≥Û†Å£Û†Å¥Û†Åø',
        description: '–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π —Ç–≤–∏–¥ –∏–∑ –®–æ—Ç–ª–∞–Ω–¥–∏–∏',
        base_price: 1600,
        quality: 92,
        quantity: 32,
        durability: 10,
        comfort: 7,
        style: 9
      }
    ]

    const randomMaterial = exclusiveMaterials[Math.floor(Math.random() * exclusiveMaterials.length)]

    // –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞–Ω–¥–æ–º –≤ –∫–∞—á–µ—Å—Ç–≤–æ –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
    const qualityVariation = Math.floor(Math.random() * 10) - 5 // ¬±5%
    const quantityVariation = Math.floor(Math.random() * 10) - 5 // ¬±5 –º–µ—Ç—Ä–æ–≤
    
    const materialWithVariation = {
      ...randomMaterial,
      quality: Math.min(100, Math.max(85, randomMaterial.quality + qualityVariation)),
      quantity: Math.max(5, randomMaterial.quantity + quantityVariation)
    }

    const { data, error: insertError } = await supabase
      .from('auctions')
      .insert({
        material_data: materialWithVariation,
        starting_price: materialWithVariation.base_price,
        current_bid: materialWithVariation.base_price,
        time_left: 60,
        status: 'waiting'
      })
      .select()
      .single()

    if (insertError) throw insertError

    return data.id
  }

  // –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –∞—É–∫—Ü–∏–æ–Ω—É
  async function joinAuction(auctionId: string) {
    if (!authStore.user) {
      error.value = '–ù–µ–æ–±—Ö–æ–¥–∏–º–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è'
      return false
    }

    try {
      // –î–æ–±–∞–≤–ª—è–µ–º –∏–≥—Ä–æ–∫–∞ –≤ —É—á–∞—Å—Ç–Ω–∏–∫–∏
      const { error: joinError } = await supabase
        .from('auction_participants')
        .insert({
          auction_id: auctionId,
          player_id: authStore.user.id,
          player_name: authStore.user.email || '–ò–≥—Ä–æ–∫'
        })

      if (joinError && joinError.code !== '23505') { // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É –¥—É–±–ª–∏–∫–∞—Ç–∞
        throw joinError
      }

      // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∞—É–∫—Ü–∏–æ–Ω–∞
      await loadAuction(auctionId)

      // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ real-time –∫–∞–Ω–∞–ª—É
      await subscribeToAuction(auctionId)

      // –ü—ã—Ç–∞–µ–º—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–ø—É—Å—Ç–∏—Ç—å –∞—É–∫—Ü–∏–æ–Ω —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
      // (–¥–∞—ë—Ç –≤—Ä–µ–º—è –¥—Ä—É–≥–∏–º –∏–≥—Ä–æ–∫–∞–º –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è)
      setTimeout(async () => {
        await tryStartAuction(auctionId)
      }, 3000)

      return true
    } catch (err: any) {
      error.value = err.message
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–∏ –∫ –∞—É–∫—Ü–∏–æ–Ω—É:', err)
      return false
    }
  }

  // –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–ø—É—Å—Ç–∏—Ç—å –∞—É–∫—Ü–∏–æ–Ω
  async function tryStartAuction(auctionId: string) {
    try {
      const { data, error: startError } = await supabase.rpc('auto_start_auction', {
        p_auction_id: auctionId
      })

      if (startError) throw startError

      if (data.success) {
        console.log('–ê—É–∫—Ü–∏–æ–Ω –∑–∞–ø—É—â–µ–Ω:', data.message)
      } else {
        console.log('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –∞—É–∫—Ü–∏–æ–Ω:', data.error)
      }
    } catch (err: any) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –∞—É–∫—Ü–∏–æ–Ω–∞:', err)
    }
  }

  // –ó–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∞—É–∫—Ü–∏–æ–Ω–∞
  async function loadAuction(auctionId: string) {
    const { data: auctionData, error: auctionError } = await supabase
      .from('auctions')
      .select('*')
      .eq('id', auctionId)
      .single()

    if (auctionError) throw auctionError

    // –ó–∞–≥—Ä—É–∂–∞–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
    const { data: participants, error: participantsError } = await supabase
      .from('auction_participants')
      .select('player_id, player_name, is_ready')
      .eq('auction_id', auctionId)

    if (participantsError) throw participantsError

    // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —Å—Ç–∞–≤–æ–∫
    const { data: bids, error: bidsError } = await supabase
      .from('auction_bids')
      .select('*')
      .eq('auction_id', auctionId)
      .order('created_at', { ascending: false })
      .limit(10)

    if (bidsError) throw bidsError

    // –§–æ—Ä–º–∏—Ä—É–µ–º –æ–±—ä–µ–∫—Ç –∞—É–∫—Ü–∏–æ–Ω–∞
    currentAuction.value = {
      id: auctionData.id,
      material: auctionData.material_data,
      starting_price: auctionData.starting_price,
      current_bid: auctionData.current_bid,
      current_bidder_id: auctionData.current_bidder_id,
      current_bidder_name: auctionData.current_bidder_name,
      time_left: auctionData.time_left,
      status: auctionData.status,
      participants: participants.map(p => ({
        id: p.player_id,
        name: p.player_name,
        is_ready: p.is_ready
      })),
      bids_history: bids,
      winner_id: auctionData.winner_id,
      winner_name: auctionData.winner_name,
      created_at: auctionData.created_at,
      started_at: auctionData.started_at,
      finished_at: auctionData.finished_at
    }

    // –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä –µ—Å–ª–∏ –∞—É–∫—Ü–∏–æ–Ω –∞–∫—Ç–∏–≤–µ–Ω
    console.log('üìä –ê—É–∫—Ü–∏–æ–Ω –∑–∞–≥—Ä—É–∂–µ–Ω:', {
      status: currentAuction.value.status,
      time_left: currentAuction.value.time_left,
      current_bid: currentAuction.value.current_bid
    })
    
    if (currentAuction.value.status === 'active') {
      console.log('üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ (—Å—Ç–∞—Ç—É—Å active)')
      startTimer()
    } else {
      console.log('‚è∏Ô∏è –¢–∞–π–º–µ—Ä –Ω–µ –∑–∞–ø—É—â–µ–Ω, —Å—Ç–∞—Ç—É—Å:', currentAuction.value.status)
    }
  }

  // –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∞—É–∫—Ü–∏–æ–Ω–∞ —á–µ—Ä–µ–∑ Realtime
  async function subscribeToAuction(auctionId: string) {
    // –û—Ç–ø–∏—Å—ã–≤–∞–µ–º—Å—è –æ—Ç –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –∫–∞–Ω–∞–ª–∞
    if (auctionChannel) {
      await supabase.removeChannel(auctionChannel)
    }

    auctionChannel = supabase.channel(`auction:${auctionId}`)

    // –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Ç–∞–±–ª–∏—Ü–µ auctions
    auctionChannel
      .on(
        'postgres_changes',
        {
          event: 'UPDATE',
          schema: 'public',
          table: 'auctions',
          filter: `id=eq.${auctionId}`
        },
        (payload) => {
          if (currentAuction.value) {
            console.log('üîÑ Realtime UPDATE auction:', {
              old_status: currentAuction.value.status,
              new_status: payload.new.status,
              old_bid: currentAuction.value.current_bid,
              new_bid: payload.new.current_bid
            })

            // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ä—ã–π —Å—Ç–∞—Ç—É—Å –î–û –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            const oldStatus = currentAuction.value.status

            // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∞—É–∫—Ü–∏–æ–Ω–∞
            currentAuction.value.current_bid = payload.new.current_bid
            currentAuction.value.current_bidder_id = payload.new.current_bidder_id
            currentAuction.value.current_bidder_name = payload.new.current_bidder_name
            currentAuction.value.status = payload.new.status
            currentAuction.value.time_left = payload.new.time_left

            // –ï—Å–ª–∏ –∞—É–∫—Ü–∏–æ–Ω –Ω–∞—á–∞–ª—Å—è (–ø–µ—Ä–µ—Ö–æ–¥ waiting -> active)
            if (payload.new.status === 'active' && oldStatus !== 'active') {
              console.log('üöÄ –ê—É–∫—Ü–∏–æ–Ω –∑–∞–ø—É—â–µ–Ω —á–µ—Ä–µ–∑ Realtime!')
              startTimer()
            }

            // –ï—Å–ª–∏ –∞—É–∫—Ü–∏–æ–Ω –∑–∞–≤–µ—Ä—à—ë–Ω
            if (payload.new.status === 'finished') {
              console.log('üèÅ –ê—É–∫—Ü–∏–æ–Ω –∑–∞–≤–µ—Ä—à—ë–Ω —á–µ—Ä–µ–∑ Realtime!')
              stopTimer()
              currentAuction.value.winner_id = payload.new.winner_id
              currentAuction.value.winner_name = payload.new.winner_name
            }
          }
        }
      )
      .on(
        'postgres_changes',
        {
          event: 'INSERT',
          schema: 'public',
          table: 'auction_bids',
          filter: `auction_id=eq.${auctionId}`
        },
        (payload) => {
          console.log('üí∞ Realtime NEW BID:', payload.new)
          if (currentAuction.value) {
            currentAuction.value.bids_history.unshift(payload.new as AuctionBid)
            if (currentAuction.value.bids_history.length > 10) {
              currentAuction.value.bids_history.pop()
            }
          }
        }
      )
      .on(
        'postgres_changes',
        {
          event: 'INSERT',
          schema: 'public',
          table: 'auction_participants',
          filter: `auction_id=eq.${auctionId}`
        },
        async (payload) => {
          console.log('üë§ Realtime NEW PARTICIPANT:', payload.new)
          // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
          if (currentAuction.value) {
            const { data } = await supabase
              .from('auction_participants')
              .select('*')
              .eq('auction_id', auctionId)
            
            if (data) {
              currentAuction.value.participants = data
            }
          }
        }
      )
      .subscribe((status) => {
        isConnected.value = status === 'SUBSCRIBED'
        console.log('–°—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –∞—É–∫—Ü–∏–æ–Ω—É:', status)
      })
  }

  // –°–¥–µ–ª–∞—Ç—å —Å—Ç–∞–≤–∫—É
  async function placeBid(amount: number) {
    if (!authStore.user || !currentAuction.value) {
      error.value = '–ù–µ–æ–±—Ö–æ–¥–∏–º–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è'
      return false
    }

    if (amount <= currentAuction.value.current_bid) {
      error.value = '–°—Ç–∞–≤–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤—ã—à–µ —Ç–µ–∫—É—â–µ–π'
      return false
    }

    if (amount > (authStore.user.money || 0)) {
      error.value = '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤'
      return false
    }

    try {
      const { data, error: bidError } = await supabase.rpc('place_auction_bid', {
        p_auction_id: currentAuction.value.id,
        p_player_id: authStore.user.id,
        p_player_name: authStore.user.email || '–ò–≥—Ä–æ–∫',
        p_bid_amount: amount
      })

      if (bidError) throw bidError

      if (!data.success) {
        error.value = data.error
        return false
      }

      // –û–ø—Ç–∏–º–∏—Å—Ç–∏—á–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ UI (—Å—Ä–∞–∑—É –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è)
      // Realtime –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç —á–µ—Ä–µ–∑ —Å–µ–∫—É–Ω–¥—É
      if (currentAuction.value) {
        currentAuction.value.current_bid = amount
        currentAuction.value.current_bidder_id = authStore.user.id
        currentAuction.value.current_bidder_name = authStore.user.email || '–ò–≥—Ä–æ–∫'
        
        console.log('‚úÖ –°—Ç–∞–≤–∫–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∞:', amount)
      }

      return true
    } catch (err: any) {
      error.value = err.message
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–º–µ—â–µ–Ω–∏–∏ —Å—Ç–∞–≤–∫–∏:', err)
      return false
    }
  }

  // –ü–æ–ª—É—á–∏—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è —Å —Å–µ—Ä–≤–µ—Ä–∞ (–∑–∞—â–∏—Ç–∞ –æ—Ç –ø–æ–¥–∫—Ä—É—Ç–∫–∏ –≤—Ä–µ–º–µ–Ω–∏)
  async function getServerTimeLeft(): Promise<number> {
    if (!currentAuction.value?.id) return 0
    
    try {
      const { data, error } = await supabase.rpc('get_auction_time_left', {
        p_auction_id: currentAuction.value.id
      })
      
      if (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ —Å —Å–µ—Ä–≤–µ—Ä–∞:', error)
        return calculateTimeLeftLocally() // Fallback –Ω–∞ –ª–æ–∫–∞–ª—å–Ω–æ–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏–µ
      }
      
      return data || 0
    } catch (err) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –≤—Ä–µ–º–µ–Ω–∏:', err)
      return calculateTimeLeftLocally()
    }
  }

  // –õ–æ–∫–∞–ª—å–Ω–æ–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ (fallback)
  function calculateTimeLeftLocally(): number {
    if (!currentAuction.value?.started_at) return 60
    
    const startedAt = new Date(currentAuction.value.started_at).getTime()
    const now = Date.now()
    const elapsed = Math.floor((now - startedAt) / 1000)
    const timeLeft = Math.max(0, 60 - elapsed)
    
    return timeLeft
  }

  // –¢–∞–π–º–µ—Ä –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –æ—Ç—Å—á—ë—Ç–∞ (—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥)
  function startTimer() {
    stopTimer() // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Ç–∞–π–º–µ—Ä –µ—Å–ª–∏ –µ—Å—Ç—å

    let tickCount = 0

    timerInterval = window.setInterval(async () => {
      if (currentAuction.value) {
        tickCount++

        // –ö–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –≤—Ä–µ–º—è —Å —Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
        if (tickCount % 5 === 0) {
          const serverTime = await getServerTimeLeft()
          currentAuction.value.time_left = serverTime
          
          // –ï—Å–ª–∏ —Å–µ—Ä–≤–µ—Ä –≥–æ–≤–æ—Ä–∏—Ç —á—Ç–æ –≤—Ä–µ–º—è –≤—ã—à–ª–æ
          if (serverTime <= 0) {
            console.log('‚è∞ –°–µ—Ä–≤–µ—Ä –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –æ–∫–æ–Ω—á–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏')
            stopTimer()
            // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –∞—É–∫—Ü–∏–æ–Ω –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª—ë–Ω–Ω–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞
            await loadAvailableAuctions()
            return
          }
        } else {
          // –ú–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏ –∫ —Å–µ—Ä–≤–µ—Ä—É –∏—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏–µ
          const localTime = calculateTimeLeftLocally()
          currentAuction.value.time_left = localTime
        }
      }
    }, 1000)
  }

  function stopTimer() {
    if (timerInterval) {
      clearInterval(timerInterval)
      timerInterval = null
    }
  }

  // –ó–∞–≤–µ—Ä—à–∏—Ç—å –∞—É–∫—Ü–∏–æ–Ω
  async function finishAuction() {
    if (!currentAuction.value) return

    stopTimer()

    try {
      const { data, error: finishError } = await supabase.rpc('finish_auction', {
        p_auction_id: currentAuction.value.id
      })

      if (finishError) throw finishError

      console.log('–ê—É–∫—Ü–∏–æ–Ω –∑–∞–≤–µ—Ä—à—ë–Ω:', data)

      // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å–ª–∏ –æ–Ω –ø–æ–±–µ–¥–∏—Ç–µ–ª—å
      if (data.winner_id === authStore.user?.id) {
        // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const { data: profile, error: profileError } = await supabase
          .from('user_profiles')
          .select('*')
          .eq('id', authStore.user.id)
          .single()

        if (!profileError && profile) {
          authStore.user = profile
          console.log('‚úÖ –ë–∞–ª–∞–Ω—Å –æ–±–Ω–æ–≤–ª—ë–Ω:', profile.money)
        }
      }

        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–µ –∞—É–∫—Ü–∏–æ–Ω—ã —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
        setTimeout(async () => {
          console.log('üîÑ –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞—É–∫—Ü–∏–æ–Ω–æ–≤...')
          await loadAvailableAuctions() // –≠—Ç–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞—Å—Ç –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –∞—É–∫—Ü–∏–æ–Ω—ã
          console.log('‚úÖ –ê—É–∫—Ü–∏–æ–Ω—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã')
        }, 3000)

    } catch (err: any) {
      error.value = err.message
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∞—É–∫—Ü–∏–æ–Ω–∞:', err)
    }
  }

  // –ü–æ–∫–∏–Ω—É—Ç—å –∞—É–∫—Ü–∏–æ–Ω
  async function leaveAuction() {
    stopTimer()

    if (auctionChannel) {
      await supabase.removeChannel(auctionChannel)
      auctionChannel = null
    }

    currentAuction.value = null
    isConnected.value = false
  }

  // –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è
  function reset() {
    stopTimer()
    unsubscribeFromAuctionsList()
    currentAuction.value = null
    availableAuctions.value = []
    isConnected.value = false
    isLoading.value = false
    error.value = null
  }

  return {
    // State
    currentAuction,
    availableAuctions,  // –ù–æ–≤–æ–µ!
    isConnected,
    isLoading,
    error,

    // Computed
    isParticipating,
    isCurrentBidder,
    canPlaceBid,
    minimumNextBid,

    // Actions
    loadAvailableAuctions,  // –ù–æ–≤–æ–µ!
    subscribeToAuctionsList,
    unsubscribeFromAuctionsList,
    findOrCreateAuction,
    joinAuction,
    placeBid,
    leaveAuction,
    reset
  }
})
