import { defineStore } from 'pinia'
import { ref, computed } from 'vue'
import { supabase } from '@/lib/supabase'
import { useAuthStore } from './authStore'
import type { 
  WarehouseMaterial, 
  WarehouseClothing, 
  WarehouseStats, 
  WarehouseSummary,
  WarehouseTransaction,
  WarehouseUpdateRequest 
} from '@/types/warehouse'

export const useWarehouseStore = defineStore('warehouse', () => {
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∫–ª–∞–¥–∞
  const materials = ref<WarehouseMaterial[]>([])
  const clothing = ref<WarehouseClothing[]>([])
  const stats = ref<WarehouseStats | null>(null)
  const transactions = ref<WarehouseTransaction[]>([])
  const loading = ref(false)
  const error = ref<string | null>(null)

  // –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø –∫ auth store –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–µ–Ω—å–≥–∞–º–∏
  const authStore = useAuthStore()

  // –í—ã—á–∏—Å–ª—è–µ–º—ã–µ —Å–≤–æ–π—Å—Ç–≤–∞ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
  const materialsTotal = computed(() => {
    return materials.value.reduce((sum, material) => sum + material.quantity, 0)
  })

  const materialsValue = computed(() => {
    return materials.value.reduce((sum, material) => sum + (material.quantity * material.price), 0)
  })

  const clothingTotal = computed(() => {
    return clothing.value.reduce((sum, item) => sum + item.quantity, 0)
  })

  const clothingValue = computed(() => {
    return clothing.value.reduce((sum, item) => sum + (item.quantity * item.price), 0)
  })

  const totalValue = computed(() => {
    return materialsValue.value + clothingValue.value
  })

  const warehouseCapacity = computed(() => {
    return stats.value?.capacity_percent || 0
  })

  const freeSpace = computed(() => {
    return stats.value?.free_space || 0
  })

  const summary = computed<WarehouseSummary>(() => ({
    materialsTotal: materialsTotal.value,
    materialsValue: materialsValue.value,
    clothingTotal: clothingTotal.value,
    clothingValue: clothingValue.value,
    totalValue: totalValue.value,
    capacityUsed: warehouseCapacity.value,
    freeSpace: freeSpace.value
  }))

  // –î–µ–π—Å—Ç–≤–∏—è –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º–∏
  const fetchMaterials = async () => {
    try {
      loading.value = true
      error.value = null
      
      console.log('üì¶ –ó–∞–≥—Ä—É–∂–∞–µ–º –º–∞—Ç–µ—Ä–∏–∞–ª—ã —Å–∫–ª–∞–¥–∞...')
      
      const { data, error: fetchError } = await supabase
        .from('warehouse_materials')
        .select('*')
        .order('name')

      if (fetchError) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤:', fetchError)
        throw fetchError
      }

      console.log('‚úÖ –ú–∞—Ç–µ—Ä–∏–∞–ª—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã:', data)
      materials.value = data || []
    } catch (err) {
      error.value = '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤'
      console.error('‚ùå Error fetching materials:', err)
    } finally {
      loading.value = false
    }
  }

  // –î–µ–π—Å—Ç–≤–∏—è –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –æ–¥–µ–∂–¥–æ–π
  const fetchClothing = async () => {
    try {
      loading.value = true
      error.value = null
      
      const { data, error: fetchError } = await supabase
        .from('warehouse_clothing')
        .select('*')
        .order('name')

      if (fetchError) {
        throw fetchError
      }

      clothing.value = data || []
    } catch (err) {
      error.value = '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ–¥–µ–∂–¥—ã'
      console.error('Error fetching clothing:', err)
    } finally {
      loading.value = false
    }
  }

  // –î–µ–π—Å—Ç–≤–∏—è –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π —Å–∫–ª–∞–¥–∞
  const fetchStats = async () => {
    try {
      loading.value = true
      error.value = null
      
      const { data, error: fetchError } = await supabase
        .from('warehouse_stats')
        .select('*')
        .single()

      if (fetchError) {
        throw fetchError
      }

      stats.value = data
    } catch (err) {
      error.value = '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–∫–ª–∞–¥–∞'
      console.error('Error fetching warehouse stats:', err)
    } finally {
      loading.value = false
    }
  }

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤
  const updateMaterialQuantity = async (materialId: string, quantityChange: number, reason?: string) => {
    try {
      loading.value = true
      error.value = null

      const material = materials.value.find(m => m.id === materialId)
      if (!material) {
        throw new Error('–ú–∞—Ç–µ—Ä–∏–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω')
      }

      const newQuantity = material.quantity + quantityChange
      if (newQuantity < 0) {
        throw new Error('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–∞—Ç–µ—Ä–∏–∞–ª–∞ –Ω–∞ —Å–∫–ª–∞–¥–µ')
      }

      // –û–±–Ω–æ–≤–ª—è–µ–º –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
      const { error: updateError } = await supabase
        .from('warehouse_materials')
        .update({ quantity: newQuantity })
        .eq('id', materialId)

      if (updateError) {
        throw updateError
      }

      // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
      material.quantity = newQuantity
      
      // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
      await recordTransaction({
        itemType: 'material',
        itemId: materialId,
        quantityChange,
        reason
      })

    } catch (err) {
      error.value = '–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–∞'
      console.error('Error updating material quantity:', err)
      throw err
    } finally {
      loading.value = false
    }
  }

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –æ–¥–µ–∂–¥—ã
  const updateClothingQuantity = async (clothingId: string, quantityChange: number, reason?: string) => {
    try {
      loading.value = true
      error.value = null

      const clothingItem = clothing.value.find(c => c.id === clothingId)
      if (!clothingItem) {
        throw new Error('–û–¥–µ–∂–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞')
      }

      const newQuantity = clothingItem.quantity + quantityChange
      if (newQuantity < 0) {
        throw new Error('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –æ–¥–µ–∂–¥—ã –Ω–∞ —Å–∫–ª–∞–¥–µ')
      }

      // –û–±–Ω–æ–≤–ª—è–µ–º –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
      const { error: updateError } = await supabase
        .from('warehouse_clothing')
        .update({ quantity: newQuantity })
        .eq('id', clothingId)

      if (updateError) {
        throw updateError
      }

      // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
      clothingItem.quantity = newQuantity
      
      // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
      await recordTransaction({
        itemType: 'clothing',
        itemId: clothingId,
        quantityChange,
        reason
      })

    } catch (err) {
      error.value = '–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –æ–¥–µ–∂–¥—ã'
      console.error('Error updating clothing quantity:', err)
      throw err
    } finally {
      loading.value = false
    }
  }

  // –ó–∞–ø–∏—Å—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
  const recordTransaction = async (update: WarehouseUpdateRequest) => {
    try {
      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º UUID –∏—Å–ø–æ–ª—å–∑—É—è crypto API
      const generateUUID = () => {
        if (typeof crypto !== 'undefined' && crypto.randomUUID) {
          return crypto.randomUUID()
        }
        // Fallback –¥–ª—è —Å—Ç–∞—Ä—ã—Ö –±—Ä–∞—É–∑–µ—Ä–æ–≤
        return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {
          const r = Math.random() * 16 | 0
          const v = c == 'x' ? r : (r & 0x3 | 0x8)
          return v.toString(16)
        })
      }

      const transaction: WarehouseTransaction = {
        id: generateUUID(),
        transaction_type: update.quantityChange > 0 ? 'in' : 'out',
        item_type: update.itemType,
        item_id: update.itemId, // –≠—Ç–æ —É–∂–µ UUID –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        item_name: update.itemType === 'material' 
          ? materials.value.find(m => m.id === update.itemId)?.name || 'Unknown'
          : clothing.value.find(c => c.id === update.itemId)?.name || 'Unknown',
        quantity_change: update.quantityChange,
        price_per_unit: update.itemType === 'material'
          ? materials.value.find(m => m.id === update.itemId)?.price || 0
          : clothing.value.find(c => c.id === update.itemId)?.price || 0,
        total_value: Math.abs(update.quantityChange) * (update.itemType === 'material'
          ? materials.value.find(m => m.id === update.itemId)?.price || 0
          : clothing.value.find(c => c.id === update.itemId)?.price || 0),
        reason: update.reason,
        performed_by: 'current_user', // –ó–¥–µ—Å—å –±—É–¥–µ—Ç ID —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        created_at: new Date().toISOString()
      }

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
      const { error: insertError } = await supabase
        .from('warehouse_transactions')
        .insert(transaction)

      if (insertError) {
        throw insertError
      }

      transactions.value.unshift(transaction)

    } catch (err) {
      console.error('Error recording transaction:', err)
    }
  }

  // –ü–æ–∫—É–ø–∫–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤
  const buyMaterial = async (materialId: string, quantity: number) => {
    try {
      loading.value = true
      error.value = null

      console.log('üõí –ü–æ–∫—É–ø–∫–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–∞:', { materialId, quantity })

      const material = materials.value.find(m => m.id === materialId)
      if (!material) {
        throw new Error('–ú–∞—Ç–µ—Ä–∏–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω')
      }

      const totalCost = material.price * quantity
      console.log('üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–∫—É–ø–∫–∏:', totalCost)
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ª–∏ –¥–µ–Ω–µ–≥ —É –∏–≥—Ä–æ–∫–∞
      if (!await authStore.spendMoney(totalCost)) {
        throw new Error('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥ –¥–ª—è –ø–æ–∫—É–ø–∫–∏')
      }

      console.log('‚úÖ –î–µ–Ω—å–≥–∏ —Å–ø–∏—Å–∞–Ω—ã, –æ–±–Ω–æ–≤–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤ –±–∞–∑–µ...')

      // –ü—Ä–∏ –ø–æ–∫—É–ø–∫–µ –£–ú–ï–ù–¨–®–ê–ï–ú –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞ —Å–∫–ª–∞–¥–µ
      const newQuantity = material.quantity - quantity
      if (newQuantity < 0) {
        throw new Error('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ç–æ–≤–∞—Ä–∞ –Ω–∞ —Å–∫–ª–∞–¥–µ')
      }

      const { error: updateError } = await supabase
        .from('warehouse_materials')
        .update({ quantity: newQuantity })
        .eq('id', materialId)

      if (updateError) {
        throw updateError
      }

      // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
      material.quantity = newQuantity
      
      // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é (–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ - —Ç–æ–≤–∞—Ä —É—Ö–æ–¥–∏—Ç —Å–æ —Å–∫–ª–∞–¥–∞)
      await recordTransaction({
        itemType: 'material',
        itemId: materialId,
        quantityChange: -quantity, // –û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ - —Ç–æ–≤–∞—Ä —É—Ö–æ–¥–∏—Ç
        reason: `–ü–æ–∫—É–ø–∫–∞ –∏–≥—Ä–æ–∫–æ–º (${quantity} —à—Ç)`
      })
      
      // –î–æ–±–∞–≤–ª—è–µ–º –æ–ø—ã—Ç –∑–∞ –ø–æ–∫—É–ø–∫—É
      // –û–ø—ã—Ç –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω —á–µ—Ä–µ–∑ authStore –ø–æ–∑–∂–µ(quantity * 2)

      return true
    } catch (err) {
      error.value = err instanceof Error ? err.message : '–û—à–∏–±–∫–∞ –ø–æ–∫—É–ø–∫–∏ –º–∞—Ç–µ—Ä–∏–∞–ª–∞'
      console.error('Error buying material:', err)
      return false
    } finally {
      loading.value = false
    }
  }

  // –ü–æ–∫—É–ø–∫–∞ –æ–¥–µ–∂–¥—ã
  const buyClothing = async (clothingId: string, quantity: number) => {
    try {
      loading.value = true
      error.value = null

      const clothingItem = clothing.value.find(c => c.id === clothingId)
      if (!clothingItem) {
        throw new Error('–û–¥–µ–∂–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞')
      }

      const totalCost = clothingItem.price * quantity
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ª–∏ –¥–µ–Ω–µ–≥ —É –∏–≥—Ä–æ–∫–∞
      if (!await authStore.spendMoney(totalCost)) {
        throw new Error('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥ –¥–ª—è –ø–æ–∫—É–ø–∫–∏')
      }

      // –ü—Ä–∏ –ø–æ–∫—É–ø–∫–µ –£–ú–ï–ù–¨–®–ê–ï–ú –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞ —Å–∫–ª–∞–¥–µ
      const newQuantity = clothingItem.quantity - quantity
      if (newQuantity < 0) {
        throw new Error('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ç–æ–≤–∞—Ä–∞ –Ω–∞ —Å–∫–ª–∞–¥–µ')
      }

      const { error: updateError } = await supabase
        .from('warehouse_clothing')
        .update({ quantity: newQuantity })
        .eq('id', clothingId)

      if (updateError) {
        throw updateError
      }

      // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
      clothingItem.quantity = newQuantity
      
      // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é (–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ - —Ç–æ–≤–∞—Ä —É—Ö–æ–¥–∏—Ç —Å–æ —Å–∫–ª–∞–¥–∞)
      await recordTransaction({
        itemType: 'clothing',
        itemId: clothingId,
        quantityChange: -quantity, // –û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ - —Ç–æ–≤–∞—Ä —É—Ö–æ–¥–∏—Ç
        reason: `–ü–æ–∫—É–ø–∫–∞ –∏–≥—Ä–æ–∫–æ–º (${quantity} —à—Ç)`
      })
      
      // –î–æ–±–∞–≤–ª—è–µ–º –æ–ø—ã—Ç –∑–∞ –ø–æ–∫—É–ø–∫—É
      // –û–ø—ã—Ç –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω —á–µ—Ä–µ–∑ authStore –ø–æ–∑–∂–µ(quantity * 3)

      return true
    } catch (err) {
      error.value = err instanceof Error ? err.message : '–û—à–∏–±–∫–∞ –ø–æ–∫—É–ø–∫–∏ –æ–¥–µ–∂–¥—ã'
      console.error('Error buying clothing:', err)
      return false
    } finally {
      loading.value = false
    }
  }

  // –ü—Ä–æ–¥–∞–∂–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ (–∏–≥—Ä–æ–∫ –ø—Ä–æ–¥–∞–µ—Ç —Å–≤–æ–∏ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –Ω–∞ —Å–∫–ª–∞–¥)
  const sellMaterial = async (materialId: string, quantity: number) => {
    try {
      loading.value = true
      error.value = null

      const material = materials.value.find(m => m.id === materialId)
      if (!material) {
        throw new Error('–ú–∞—Ç–µ—Ä–∏–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω')
      }

      const totalValue = material.price * quantity * 0.8 // –°–∫–ª–∞–¥ –ø–æ–∫—É–ø–∞–µ—Ç –ø–æ 80% –æ—Ç —Ü–µ–Ω—ã
      
      // –î–æ–±–∞–≤–ª—è–µ–º –¥–µ–Ω—å–≥–∏ –∏–≥—Ä–æ–∫—É
      await authStore.addMoney(totalValue)

      // –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∞—Ç–µ—Ä–∏–∞–ª–∞ –Ω–∞–ø—Ä—è–º—É—é
      const { error: updateError } = await supabase
        .from('warehouse_materials')
        .update({ quantity: material.quantity + quantity })
        .eq('id', materialId)

      if (updateError) {
        throw updateError
      }

      // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
      material.quantity += quantity
      
      // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
      await recordTransaction({
        itemType: 'material',
        itemId: materialId,
        quantityChange: quantity,
        reason: `–ü—Ä–æ–¥–∞–∂–∞ –∏–≥—Ä–æ–∫–æ–º (${quantity} —à—Ç)`
      })
      
      // –î–æ–±–∞–≤–ª—è–µ–º –æ–ø—ã—Ç –∑–∞ –ø—Ä–æ–¥–∞–∂—É
      // –û–ø—ã—Ç –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω —á–µ—Ä–µ–∑ authStore –ø–æ–∑–∂–µ(quantity)

      return true
    } catch (err) {
      error.value = err instanceof Error ? err.message : '–û—à–∏–±–∫–∞ –ø—Ä–æ–¥–∞–∂–∏ –º–∞—Ç–µ—Ä–∏–∞–ª–∞'
      console.error('Error selling material:', err)
      return false
    } finally {
      loading.value = false
    }
  }

  // –ü—Ä–æ–¥–∞–∂–∞ –æ–¥–µ–∂–¥—ã (–∏–≥—Ä–æ–∫ –ø—Ä–æ–¥–∞–µ—Ç —Å–≤–æ—é –æ–¥–µ–∂–¥—É –Ω–∞ —Å–∫–ª–∞–¥)
  const sellClothing = async (clothingId: string, quantity: number) => {
    try {
      loading.value = true
      error.value = null

      const clothingItem = clothing.value.find(c => c.id === clothingId)
      if (!clothingItem) {
        throw new Error('–û–¥–µ–∂–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞')
      }

      const totalValue = clothingItem.price * quantity * 0.8 // –°–∫–ª–∞–¥ –ø–æ–∫—É–ø–∞–µ—Ç –ø–æ 80% –æ—Ç —Ü–µ–Ω—ã
      
      // –î–æ–±–∞–≤–ª—è–µ–º –¥–µ–Ω—å–≥–∏ –∏–≥—Ä–æ–∫—É
      await authStore.addMoney(totalValue)

      // –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–¥–µ–∂–¥—ã –Ω–∞–ø—Ä—è–º—É—é
      const { error: updateError } = await supabase
        .from('warehouse_clothing')
        .update({ quantity: clothingItem.quantity + quantity })
        .eq('id', clothingId)

      if (updateError) {
        throw updateError
      }

      // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
      clothingItem.quantity += quantity
      
      // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
      await recordTransaction({
        itemType: 'clothing',
        itemId: clothingId,
        quantityChange: quantity,
        reason: `–ü—Ä–æ–¥–∞–∂–∞ –∏–≥—Ä–æ–∫–æ–º (${quantity} —à—Ç)`
      })
      
      // –î–æ–±–∞–≤–ª—è–µ–º –æ–ø—ã—Ç –∑–∞ –ø—Ä–æ–¥–∞–∂—É
      // –û–ø—ã—Ç –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω —á–µ—Ä–µ–∑ authStore –ø–æ–∑–∂–µ(quantity * 2)

      return true
    } catch (err) {
      error.value = err instanceof Error ? err.message : '–û—à–∏–±–∫–∞ –ø—Ä–æ–¥–∞–∂–∏ –æ–¥–µ–∂–¥—ã'
      console.error('Error selling clothing:', err)
      return false
    } finally {
      loading.value = false
    }
  }

  // –ó–∞–≥—Ä—É–∑–∫–∞ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö —Å–∫–ª–∞–¥–∞
  const loadWarehouseData = async () => {
    console.log('üè≠ –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–∫–ª–∞–¥–∞...')
    try {
      await Promise.all([
        fetchMaterials(),
        fetchClothing(),
        fetchStats()
      ])
      console.log('‚úÖ –î–∞–Ω–Ω—ã–µ —Å–∫–ª–∞–¥–∞ –∑–∞–≥—Ä—É–∂–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ')
    } catch (err) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö —Å–∫–ª–∞–¥–∞:', err)
    }
  }

  // –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–∫–ª–∞–¥–∞
  const resetWarehouse = () => {
    materials.value = []
    clothing.value = []
    stats.value = null
    transactions.value = []
    error.value = null
  }

  return {
    // –°–æ—Å—Ç–æ—è–Ω–∏–µ
    materials,
    clothing,
    stats,
    transactions,
    loading,
    error,
    
    // –í—ã—á–∏—Å–ª—è–µ–º—ã–µ —Å–≤–æ–π—Å—Ç–≤–∞
    materialsTotal,
    materialsValue,
    clothingTotal,
    clothingValue,
    totalValue,
    warehouseCapacity,
    freeSpace,
    summary,
    
    // –î–µ–π—Å—Ç–≤–∏—è
    fetchMaterials,
    fetchClothing,
    fetchStats,
    updateMaterialQuantity,
    updateClothingQuantity,
    recordTransaction,
    buyMaterial,
    buyClothing,
    sellMaterial,
    sellClothing,
    loadWarehouseData,
    resetWarehouse
  }
})
