import { ref, reactive } from 'vue'

export interface MusicTrack {
  id: string
  name: string
  path: string
  duration: number
}

export function useMusic() {
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –º—É–∑—ã–∫–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã
  const isPlaying = ref(false)
  const currentTrackIndex = ref(0)
  const currentTrack = ref<MusicTrack | null>(null)
  const volume = ref(1.0) // 0.0 - 1.0
  const musicVolume = ref(0.6) // 0.0 - 1.0
  const environmentVolume = ref(0.4) // 0.0 - 1.0
  const isWaitingForInteraction = ref(true) // –û–∂–∏–¥–∞–Ω–∏–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const hasUserInteracted = ref(false) // –§–ª–∞–≥ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const isInitialized = ref(false) // –§–ª–∞–≥ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
  
  // –°–ø–∏—Å–æ–∫ —Ç—Ä–µ–∫–æ–≤
  const tracks = ref<MusicTrack[]>([
    {
      id: 'track1',
      name: '–§–æ–Ω–æ–≤–∞—è –º–µ–ª–æ–¥–∏—è 1',
      path: '/music/1 (1).mp3',
      duration: 0
    },
    {
      id: 'track2', 
      name: '–§–æ–Ω–æ–≤–∞—è –º–µ–ª–æ–¥–∏—è 2',
      path: '/music/1 (2).mp3',
      duration: 0
    },
    {
      id: 'track3',
      name: '–§–æ–Ω–æ–≤–∞—è –º–µ–ª–æ–¥–∏—è 3', 
      path: '/music/1 (3).mp3',
      duration: 0
    }
  ])

  // –°–æ–∑–¥–∞–µ–º –∞—É–¥–∏–æ —ç–ª–µ–º–µ–Ω—Ç
  const audio = new Audio()
  let fadeTimeout: NodeJS.Timeout | null = null
  let fadeInterval: NodeJS.Timeout | null = null

  // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞—É–¥–∏–æ —ç–ª–µ–º–µ–Ω—Ç–∞
  audio.preload = 'auto'
  audio.loop = false
  
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–∫–æ–Ω—á–∞–Ω–∏—è —Ç—Ä–µ–∫–∞
  audio.addEventListener('ended', () => {
    console.log('üéµ –¢—Ä–µ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É')
    nextTrack()
  })

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≥—Ä—É–∑–∫–∏ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
  audio.addEventListener('loadedmetadata', () => {
    if (currentTrack.value) {
      currentTrack.value.duration = audio.duration
      console.log(`üéµ –ó–∞–≥—Ä—É–∂–µ–Ω—ã –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ —Ç—Ä–µ–∫–∞: ${currentTrack.value.name}, –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: ${audio.duration}—Å`)
    }
  })

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
  audio.addEventListener('error', (e) => {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∞—É–¥–∏–æ:', e)
    console.error('‚ùå –ö–æ–¥ –æ—à–∏–±–∫–∏:', audio.error?.code)
    console.error('‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ –æ—à–∏–±–∫–∏:', audio.error?.message)
  })

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–∞—É–∑—ã (–¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)
  audio.addEventListener('pause', () => {
    console.log('‚è∏Ô∏è –ê—É–¥–∏–æ –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ')
  })

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è (–¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)
  audio.addEventListener('play', () => {
    console.log('‚ñ∂Ô∏è –ê—É–¥–∏–æ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è')
  })

  // –§—É–Ω–∫—Ü–∏—è –∑–∞—Ç—É—Ö–∞–Ω–∏—è
  const fadeOut = (duration: number = 2000): Promise<void> => {
    return new Promise((resolve) => {
      const startVolume = audio.volume
      const steps = 20
      const stepDuration = duration / steps
      const volumeStep = startVolume / steps
      
      let currentStep = 0
      
      fadeInterval = setInterval(() => {
        currentStep++
        audio.volume = Math.max(0, startVolume - (volumeStep * currentStep))
        
        if (currentStep >= steps || audio.volume <= 0) {
          audio.volume = 0
          clearInterval(fadeInterval!)
          fadeInterval = null
          resolve()
        }
      }, stepDuration)
    })
  }

  // –§—É–Ω–∫—Ü–∏—è –ø–æ—è–≤–ª–µ–Ω–∏—è –∑–≤—É–∫–∞
  const fadeIn = (duration: number = 3000): Promise<void> => {
    return new Promise((resolve) => {
      const targetVolume = volume.value * musicVolume.value
      const steps = 30 // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —à–∞–≥–æ–≤ –¥–ª—è –±–æ–ª–µ–µ –ø–ª–∞–≤–Ω–æ–≥–æ –ø–µ—Ä–µ—Ö–æ–¥–∞
      const stepDuration = duration / steps
      
      // –ù–∞—á–∏–Ω–∞–µ–º —Å –æ—á–µ–Ω—å —Ç–∏—Ö–æ–π –≥—Ä–æ–º–∫–æ—Å—Ç–∏
      audio.volume = 0.01
      let currentStep = 0
      
      fadeInterval = setInterval(() => {
        currentStep++
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º —ç–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω—É—é –∫—Ä–∏–≤—É—é –¥–ª—è –±–æ–ª–µ–µ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ fade-in
        const progress = currentStep / steps
        const easedProgress = 1 - Math.pow(1 - progress, 3) // easeOutCubic
        audio.volume = Math.min(targetVolume, targetVolume * easedProgress)
        
        if (currentStep >= steps || audio.volume >= targetVolume) {
          audio.volume = targetVolume
          clearInterval(fadeInterval!)
          fadeInterval = null
          resolve()
        }
      }, stepDuration)
    })
  }

  // –ó–∞–≥—Ä—É–∑–∫–∞ –∏ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ —Ç—Ä–µ–∫–∞
  const loadTrack = async (trackIndex: number): Promise<void> => {
    if (trackIndex < 0 || trackIndex >= tracks.value.length) {
      console.error('–ù–µ–≤–µ—Ä–Ω—ã–π –∏–Ω–¥–µ–∫—Å —Ç—Ä–µ–∫–∞:', trackIndex)
      return
    }

    const track = tracks.value[trackIndex]
    currentTrackIndex.value = trackIndex
    currentTrack.value = track

    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∞—É–¥–∏–æ –ø–µ—Ä–µ–¥ –∑–∞–≥—Ä—É–∑–∫–æ–π
      console.log('üéµ –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç—Ä–µ–∫:', track.name)
      console.log('üéµ –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∞—É–¥–∏–æ:', {
        paused: audio.paused,
        ended: audio.ended,
        readyState: audio.readyState,
        error: audio.error
      })

      audio.src = track.path
      await audio.load()
      
      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≥—Ä–æ–º–∫–æ—Å—Ç—å –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏
      audio.volume = volume.value * musicVolume.value
      
      console.log('‚úÖ –¢—Ä–µ–∫ –∑–∞–≥—Ä—É–∂–µ–Ω:', track.name)
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç—Ä–µ–∫–∞:', error)
    }
  }

  // –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Ç—Ä–µ–∫—É
  const nextTrack = async (): Promise<void> => {
    if (!isPlaying.value) return

    // –ó–∞—Ç—É—Ö–∞–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —Ç—Ä–µ–∫–∞
    await fadeOut(2000)
    
    // –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Ç—Ä–µ–∫—É
    const nextIndex = (currentTrackIndex.value + 1) % tracks.value.length
    await loadTrack(nextIndex)
    
    // –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ —Å –ø–æ—è–≤–ª–µ–Ω–∏–µ–º
    if (isPlaying.value) {
      audio.play()
      await fadeIn(3000) // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –≤—Ä–µ–º—è fade-in
    }
  }

  // –ü–µ—Ä–µ—Ö–æ–¥ –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É —Ç—Ä–µ–∫—É
  const previousTrack = async (): Promise<void> => {
    if (!isPlaying.value) return

    await fadeOut(2000)
    
    const prevIndex = currentTrackIndex.value === 0 
      ? tracks.value.length - 1 
      : currentTrackIndex.value - 1
    
    await loadTrack(prevIndex)
    
    if (isPlaying.value) {
      audio.play()
      await fadeIn(3000) // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –≤—Ä–µ–º—è fade-in
    }
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è
  const checkAndRestorePlayback = async (): Promise<void> => {
    if (isPlaying.value && (audio.paused || audio.ended)) {
      console.log('üîß –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ...')
      try {
        await audio.play()
        console.log('‚úÖ –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ')
      } catch (error) {
        console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ:', error)
      }
    }
  }

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º—É–∑—ã–∫–∏ –ø–æ—Å–ª–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const initializeAfterInteraction = async (): Promise<void> => {
    if (hasUserInteracted.value) {
      console.log('üëÜ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–æ–≤–∞–ª —Å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ–º')
      return
    }
    
    hasUserInteracted.value = true
    isWaitingForInteraction.value = false
    console.log('üëÜ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–æ–≤–∞–ª —Å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ–º, –∑–∞–ø—É—Å–∫–∞–µ–º –º—É–∑—ã–∫—É')
    
    await play()
  }

  // –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ
  const play = async (): Promise<void> => {
    if (isPlaying.value || isInitialized.value) {
      console.log('üéµ –ú—É–∑—ã–∫–∞ —É–∂–µ –∑–∞–ø—É—â–µ–Ω–∞ –∏–ª–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞')
      return
    }

    isInitialized.value = true
    isPlaying.value = true
    
    if (!currentTrack.value) {
      await loadTrack(0)
    }
    
    try {
      await audio.play()
      await fadeIn(3000) // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –≤—Ä–µ–º—è fade-in –¥–ª—è –±–æ–ª–µ–µ –ø–ª–∞–≤–Ω–æ–≥–æ –ø–æ—è–≤–ª–µ–Ω–∏—è
      console.log('‚ñ∂Ô∏è –ú—É–∑—ã–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞')
      
      // –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫—É—é –ø—Ä–æ–≤–µ—Ä–∫—É —Å–æ—Å—Ç–æ—è–Ω–∏—è
      const checkInterval = setInterval(() => {
        if (!isPlaying.value) {
          clearInterval(checkInterval)
          return
        }
        checkAndRestorePlayback()
      }, 5000) // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è:', error)
      
      // –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ —Å–≤—è–∑–∞–Ω–∞ —Å –ø–æ–ª–∏—Ç–∏–∫–æ–π –±—Ä–∞—É–∑–µ—Ä–∞, –∂–¥–µ–º –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è
      if (error instanceof Error && error.name === 'NotAllowedError') {
        console.log('üö´ –ê–≤—Ç–æ–≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ, –∂–¥–µ–º –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è')
        isWaitingForInteraction.value = true
        isPlaying.value = false
        isInitialized.value = false // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–∏
      } else {
        isPlaying.value = false
        isInitialized.value = false
      }
    }
  }

  // –ü–∞—É–∑–∞
  const pause = async (): Promise<void> => {
    if (!isPlaying.value) return

    await fadeOut(1000)
    audio.pause()
    isPlaying.value = false
    console.log('‚è∏Ô∏è –ú—É–∑—ã–∫–∞ –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞')
  }

  // –û—Å—Ç–∞–Ω–æ–≤–∫–∞
  const stop = (): void => {
    if (fadeInterval) {
      clearInterval(fadeInterval)
      fadeInterval = null
    }
    
    audio.pause()
    audio.currentTime = 0
    isPlaying.value = false
    console.log('‚èπÔ∏è –ú—É–∑—ã–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞')
  }

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ–±—â–µ–π –≥—Ä–æ–º–∫–æ—Å—Ç–∏
  const updateVolume = (newVolume: number): void => {
    volume.value = Math.max(0, Math.min(1, newVolume))
    const finalVolume = volume.value * musicVolume.value
    
    // –í—Å–µ–≥–¥–∞ –æ–±–Ω–æ–≤–ª—è–µ–º –≥—Ä–æ–º–∫–æ—Å—Ç—å –∞—É–¥–∏–æ —ç–ª–µ–º–µ–Ω—Ç–∞, –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è
    audio.volume = finalVolume
    
    console.log(`üîä –û–±—â–∞—è –≥—Ä–æ–º–∫–æ—Å—Ç—å: ${Math.round(volume.value * 100)}% ‚Üí –§–∏–Ω–∞–ª—å–Ω–∞—è –≥—Ä–æ–º–∫–æ—Å—Ç—å: ${Math.round(finalVolume * 100)}%`)
    console.log(`üéµ –¢–µ–∫—É—â–∞—è –≥—Ä–æ–º–∫–æ—Å—Ç—å –∞—É–¥–∏–æ: ${Math.round(audio.volume * 100)}%`)
  }

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≥—Ä–æ–º–∫–æ—Å—Ç–∏ –º—É–∑—ã–∫–∏
  const updateMusicVolume = (newVolume: number): void => {
    musicVolume.value = Math.max(0, Math.min(1, newVolume))
    const finalVolume = volume.value * musicVolume.value
    
    // –í—Å–µ–≥–¥–∞ –æ–±–Ω–æ–≤–ª—è–µ–º –≥—Ä–æ–º–∫–æ—Å—Ç—å –∞—É–¥–∏–æ —ç–ª–µ–º–µ–Ω—Ç–∞, –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è
    audio.volume = finalVolume
    
    console.log(`üéµ –ì—Ä–æ–º–∫–æ—Å—Ç—å –º—É–∑—ã–∫–∏: ${Math.round(musicVolume.value * 100)}% ‚Üí –§–∏–Ω–∞–ª—å–Ω–∞—è –≥—Ä–æ–º–∫–æ—Å—Ç—å: ${Math.round(finalVolume * 100)}%`)
    console.log(`üéµ –¢–µ–∫—É—â–∞—è –≥—Ä–æ–º–∫–æ—Å—Ç—å –∞—É–¥–∏–æ: ${Math.round(audio.volume * 100)}%`)
  }

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≥—Ä–æ–º–∫–æ—Å—Ç–∏ –æ–∫—Ä—É–∂–µ–Ω–∏—è (–ø–æ–∫–∞ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è)
  const updateEnvironmentVolume = (newVolume: number): void => {
    environmentVolume.value = Math.max(0, Math.min(1, newVolume))
    console.log(`üåç –ì—Ä–æ–º–∫–æ—Å—Ç—å –æ–∫—Ä—É–∂–µ–Ω–∏—è: ${Math.round(environmentVolume.value * 100)}%`)
  }

  // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ç—Ä–µ–∫–∞
  const addTrack = (track: Omit<MusicTrack, 'duration'>): void => {
    tracks.value.push({
      ...track,
      duration: 0
    })
    console.log('üéµ –î–æ–±–∞–≤–ª–µ–Ω –Ω–æ–≤—ã–π —Ç—Ä–µ–∫:', track.name)
  }

  // –£–¥–∞–ª–µ–Ω–∏–µ —Ç—Ä–µ–∫–∞
  const removeTrack = (trackId: string): void => {
    const index = tracks.value.findIndex(track => track.id === trackId)
    if (index !== -1) {
      tracks.value.splice(index, 1)
      if (currentTrackIndex.value >= tracks.value.length) {
        currentTrackIndex.value = 0
      }
      console.log('üóëÔ∏è –¢—Ä–µ–∫ —É–¥–∞–ª–µ–Ω:', trackId)
    }
  }

  // –û—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
  const cleanup = (): void => {
    stop()
    if (fadeTimeout) {
      clearTimeout(fadeTimeout)
    }
    audio.removeEventListener('ended', nextTrack)
    audio.removeEventListener('loadedmetadata', () => {})
  }

  return {
    // –°–æ—Å—Ç–æ—è–Ω–∏–µ
    isPlaying,
    currentTrackIndex,
    currentTrack,
    volume,
    musicVolume,
    environmentVolume,
    tracks,
    isWaitingForInteraction,
    hasUserInteracted,
    isInitialized,
    
    // –ú–µ—Ç–æ–¥—ã
    play,
    pause,
    stop,
    nextTrack,
    previousTrack,
    loadTrack,
    checkAndRestorePlayback,
    initializeAfterInteraction,
    updateVolume,
    updateMusicVolume,
    updateEnvironmentVolume,
    addTrack,
    removeTrack,
    cleanup
  }
}
